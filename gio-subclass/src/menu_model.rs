// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use MenuAttributeIter;
use MenuLinkIter;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;


pub trait MenuModelImpl<T: MenuModelBase>: ObjectImpl<T> + AnyImpl + 'static {

    fn get_item_attribute_value(&self, model: &T, item_index: i32, attribute: &str, expected_type: Option<&glib::VariantTy>) -> Option<glib::Variant>{
        model.parent_get_item_attribute_value(item_index, attribute, expected_type)
    }

    fn get_item_attributes(&self, model: &T, item_index: i32, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 181 }){
        model.parent_get_item_attributes(item_index, attributes)
    }

    fn get_item_link(&self, model: &T, item_index: i32, link: &str) -> Option<MenuModel>{
        model.parent_get_item_link(item_index, link)
    }

    fn get_item_links(&self, model: &T, item_index: i32, links: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 1, id: 88 }){
        model.parent_get_item_links(item_index, links)
    }

    fn get_n_items(&self, model: &T) -> i32{
        model.parent_get_n_items()
    }

    fn is_mutable(&self, model: &T) -> bool{
        model.parent_is_mutable()
    }

    fn iterate_item_attributes(&self, model: &T, item_index: i32) -> Option<MenuAttributeIter>{
        model.parent_iterate_item_attributes(item_index)
    }

    fn iterate_item_links(&self, model: &T, item_index: i32) -> Option<MenuLinkIter>{
        model.parent_iterate_item_links(item_index)
    }

}

pub trait MenuModelImplExt<T> {}

}
impl<S: MenuModelImpl<T>, T: ObjectType >> MenuModelImplExt<T> for S {}

any_impl!(MenuModelBase, MenuModelImpl);

pub unsafe trait MenuModelBase: ObjectType {

    fn parent_get_item_attribute_value(&self, item_index: i32, attribute: &str, expected_type: Option<&glib::VariantTy>) -> Option<glib::Variant>{
        let expected_type = expected_type.into();
        let expected_type = expected_type.to_glib_none();
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .get_item_attribute_value
            .map(|f|{ from_glib_full(f(self.to_glib_none().0,item_index,attribute.to_glib_none().0,expected_type.0)) })
            .unwrap_or(())
        }
    }

    fn parent_get_item_attributes(&self, item_index: i32, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 181 }){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .get_item_attributes
            .map(|f|{ f(self.to_glib_none().0,item_index,/*Unknown conversion*/attributes); })
            .unwrap_or(())
        }
    }

    fn parent_get_item_link(&self, item_index: i32, link: &str) -> Option<MenuModel>{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .get_item_link
            .map(|f|{ from_glib_full(f(self.to_glib_none().0,item_index,link.to_glib_none().0)) })
            .unwrap_or(())
        }
    }

    fn parent_get_item_links(&self, item_index: i32, links: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 1, id: 88 }){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .get_item_links
            .map(|f|{ f(self.to_glib_none().0,item_index,/*Unknown conversion*/links); })
            .unwrap_or(())
        }
    }

    fn parent_get_n_items(&self) -> i32{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .get_n_items
            .map(|f|{ f(self.to_glib_none().0) })
            .unwrap_or(())
        }
    }

    fn parent_is_mutable(&self) -> bool{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .is_mutable
            .map(|f|{ from_glib(f(self.to_glib_none().0)) })
            .unwrap_or(())
        }
    }

    fn parent_iterate_item_attributes(&self, item_index: i32) -> Option<MenuAttributeIter>{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .iterate_item_attributes
            .map(|f|{ from_glib_full(f(self.to_glib_none().0,item_index)) })
            .unwrap_or(())
        }
    }

    fn parent_iterate_item_links(&self, item_index: i32) -> Option<MenuLinkIter>{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuModelClass;
            (*parent_klass)
            .iterate_item_links
            .map(|f|{ from_glib_full(f(self.to_glib_none().0,item_index)) })
            .unwrap_or(())
        }
    }

}

pub unsafe trait MenuModelClassExt<T: MenuModelBase>
where
    T::ImplType: MenuModelImpl<T>{

    fn override_vfuncs(&mut self, _: &ClassInitToken){
        unsafe {
            let klass = &mut *(self as *const Self as *mut ffi::GMenuModelClass);
            klass.get_item_attribute_value = Some(menumodel_get_item_attribute_value::<T>);
            klass.get_item_attributes = Some(menumodel_get_item_attributes::<T>);
            klass.get_item_link = Some(menumodel_get_item_link::<T>);
            klass.get_item_links = Some(menumodel_get_item_links::<T>);
            klass.get_n_items = Some(menumodel_get_n_items::<T>);
            klass.is_mutable = Some(menumodel_is_mutable::<T>);
            klass.iterate_item_attributes = Some(menumodel_iterate_item_attributes::<T>);
            klass.iterate_item_links = Some(menumodel_iterate_item_links::<T>);
        }
    }

}

glib_wrapper! {

    pub struct MenuModel(Object<InstanceStruct<MenuModel>>)    ;
    match fn { 
         get_type => || get_type::<MenuModel>(),
     }

}

unsafe impl<T: ObjectType > MenuModelBase for T {}

pub type MenuModelClass = ClassStruct<MenuModel>;

// FIXME: Boilerplate

// FIXME: Boilerplate

#[macro_export]
macro_rules! box_menumodel_impl(
    ($name:ident) => {
        box_object_impl!($name);
        impl<T: $crate::menu_model::MenuModelBase> $crate::menu_model::MenuModelImpl<T> for Box<$name<T>>{

            fn get_item_attribute_value(&self, model: &T, item_index: i32, attribute: &str, expected_type: Option<&glib::VariantTy>) -> Option<glib::Variant>{
                let imp: &$name<T> = self.as_ref();
                imp.get_item_attribute_value(item_index, attribute, expected_type)
            }

            fn get_item_attributes(&self, model: &T, item_index: i32, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 2, id: 181 }){
                let imp: &$name<T> = self.as_ref();
                imp.get_item_attributes(item_index, attributes)
            }

            fn get_item_link(&self, model: &T, item_index: i32, link: &str) -> Option<MenuModel>{
                let imp: &$name<T> = self.as_ref();
                imp.get_item_link(item_index, link)
            }

            fn get_item_links(&self, model: &T, item_index: i32, links: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 1, id: 88 }){
                let imp: &$name<T> = self.as_ref();
                imp.get_item_links(item_index, links)
            }

            fn get_n_items(&self, model: &T) -> i32{
                let imp: &$name<T> = self.as_ref();
                imp.get_n_items()
            }

            fn is_mutable(&self, model: &T) -> bool{
                let imp: &$name<T> = self.as_ref();
                imp.is_mutable()
            }

            fn iterate_item_attributes(&self, model: &T, item_index: i32) -> Option<MenuAttributeIter>{
                let imp: &$name<T> = self.as_ref();
                imp.iterate_item_attributes(item_index)
            }

            fn iterate_item_links(&self, model: &T, item_index: i32) -> Option<MenuLinkIter>{
                let imp: &$name<T> = self.as_ref();
                imp.iterate_item_links(item_index)
            }
        }
    }
);

impl ObjectType for MenuModel{
    const NAME: &'static str = "RsGio.MenuModel";
    type ImplType = Box<MenuModelImpl<Self>>;
    type InstanceStructType = InstanceStruct<Self>;
    fn class_init(token: &ClassInitToken, klass: &mut MenuModelClass) {
        ObjectClassExt::override_vfuncs(klass, token);
    }
    object_type_fns!();
}

unsafe extern "C" fn menumodel_get_item_attribute_value<T: MenuModelBase>
(ptr: *mut GMenuModel, item_index: c_int, attribute: *const c_char, expected_type: *const glib::GVariantType) -> *mut glib::GVariant
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.get_item_attribute_value()
}

unsafe extern "C" fn menumodel_get_item_attributes<T: MenuModelBase>
(ptr: *mut GMenuModel, item_index: c_int, attributes: *mut *mut glib::GHashTable)
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.get_item_attributes()
}

unsafe extern "C" fn menumodel_get_item_link<T: MenuModelBase>
(ptr: *mut GMenuModel, item_index: c_int, link: *const c_char) -> *mut GMenuModel
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.get_item_link()
}

unsafe extern "C" fn menumodel_get_item_links<T: MenuModelBase>
(ptr: *mut GMenuModel, item_index: c_int, links: *mut *mut glib::GHashTable)
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.get_item_links()
}

unsafe extern "C" fn menumodel_get_n_items<T: MenuModelBase>
(ptr: *mut GMenuModel) -> c_int
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.get_n_items()
}

unsafe extern "C" fn menumodel_is_mutable<T: MenuModelBase>
(ptr: *mut GMenuModel) -> gboolean
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.is_mutable()
}

unsafe extern "C" fn menumodel_iterate_item_attributes<T: MenuModelBase>
(ptr: *mut GMenuModel, item_index: c_int) -> *mut GMenuAttributeIter
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.iterate_item_attributes()
}

unsafe extern "C" fn menumodel_iterate_item_links<T: MenuModelBase>
(ptr: *mut GMenuModel, item_index: c_int) -> *mut GMenuLinkIter
where
    T::ImplType: MenuModelImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menumodel = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menumodel.get_impl();
    imp.iterate_item_links()
}
