// This file was generated by gir (https://github.com/gtk-rs/gir @ e895709+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 47c69e6)
// DO NOT EDIT

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib_ffi::{gboolean, gconstpointer, gpointer, GType};

use gio;
use gio_ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

use gobject_subclass::anyimpl::*;
use gobject_subclass::object::*;


pub trait ActionMapImpl: AnyImpl + 'static {

    fn add_action(&self, action_map: &gio::ActionMap, action: &gio::Action);

    fn lookup_action(&self, action_map: &gio::ActionMap, action_name: &str) -> Option<gio::Action>;

    fn remove_action(&self, action_map: &gio::ActionMap, action_name: &str);

}

any_impl!(ActionMapImpl);

pub trait ActionMapImplStatic<T: ObjectType>: 'static {
    fn get_impl<'a>(&self, imp: &'a T::ImplType) -> &'a ActionMapImpl;
}

struct ActionMapStatic<T: ObjectType>{
    imp_static: *const ActionMapImplStatic<T>
}


unsafe extern "C" fn action_map_add_action<T: ObjectType>
(gptr: *mut gio_ffi::GActionMap, action: *mut gio_ffi::GAction)
{
    floating_reference_guard!(gptr);
    let klass = &**(gptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(gio_ffi::g_action_map_get_type())
                                     as *const ActionMapStatic<T>;
    let instance = &*(gptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    let wrap = from_glib_borrow(gptr);
    imp.add_action(&wrap, &from_glib_none(action));
}

unsafe extern "C" fn action_map_lookup_action<T: ObjectType>
(gptr: *mut gio_ffi::GActionMap, action_name: *const c_char) -> *mut gio_ffi::GAction
{
    floating_reference_guard!(gptr);
    let klass = &**(gptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(gio_ffi::g_action_map_get_type())
                                     as *const ActionMapStatic<T>;
    let instance = &*(gptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    let wrap = from_glib_borrow(gptr);
    let rs_ret = imp.lookup_action(&wrap, &String::from_glib_none(action_name));
    
    match rs_ret {
        Some(t_ret) => {
        let ret = t_ret.to_glib_full();
        unsafe extern "C" fn destroy_ret(p: glib_ffi::gpointer){
            let _: gio::Action = gio::Action::from_glib_full(p as *mut gio_ffi::GAction);
        };
        gobject_ffi::g_object_set_qdata_full(gptr as *mut gobject_ffi::GObject,
            glib_ffi::g_quark_from_string("rs_action_map_lookup_action_ret".to_glib_none().0),
            ret as *mut c_void,
            Some(destroy_ret)
        );
        ret
    },
        None => ptr::null_mut()
    }
}

unsafe extern "C" fn action_map_remove_action<T: ObjectType>
(gptr: *mut gio_ffi::GActionMap, action_name: *const c_char)
{
    floating_reference_guard!(gptr);
    let klass = &**(gptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(gio_ffi::g_action_map_get_type())
                                     as *const ActionMapStatic<T>;
    let instance = &*(gptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    let wrap = from_glib_borrow(gptr);
    imp.remove_action(&wrap, &String::from_glib_none(action_name));
}

unsafe extern "C" fn action_map_init<T: ObjectType>(
    iface: glib_ffi::gpointer,
    iface_data: glib_ffi::gpointer
) {
    let action_map_iface = &mut *(iface as *mut gio_ffi::GActionMapInterface);
    let iface_type = (*(iface as *const gobject_ffi::GTypeInterface)).g_type;
    let type_ = (*(iface as *const gobject_ffi::GTypeInterface)).g_instance_type;
    let klass = &mut *(gobject_ffi::g_type_class_ref(type_) as *mut ClassStruct<T>);
    let interfaces_static = &mut *(klass.interfaces_static as *mut Vec<_>);
    interfaces_static.push((iface_type, iface_data));
    action_map_iface.add_action = Some(action_map_add_action::<T>);
    action_map_iface.lookup_action = Some(action_map_lookup_action::<T>);
    action_map_iface.remove_action = Some(action_map_remove_action::<T>);
}

pub fn register_action_map<T: ObjectType, I: ActionMapImplStatic<T>>(
    _: &TypeInitToken,
    type_: glib::Type,
    imp: &I,
) {

    unsafe {
        let imp = imp as &ActionMapImplStatic<T> as *const ActionMapImplStatic<T>;
        let interface_static = Box::new(ActionMapStatic {
            imp_static: imp,
        });
        let iface_info = gobject_ffi::GInterfaceInfo {
            interface_init: Some(action_map_init::<T>),
            interface_finalize: None,
            interface_data: Box::into_raw(interface_static) as glib_ffi::gpointer,
        };
        gobject_ffi::g_type_add_interface_static(
            type_.to_glib(),
            gio_ffi::g_action_map_get_type(),
            &iface_info,
        );
    }
        
}
