// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use Action;
use SettingsBindFlags;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;


pub trait SettingsImpl<T: SettingsBase>: ObjectImpl<T> + AnyImpl + 'static {

    fn change_event(&self, settings: &T, keys: /*Ignored*/glib::Quark, n_keys: i32) -> bool{
        settings.parent_change_event(keys, n_keys)
    }

    fn changed(&self, settings: &T, key: &str){
        settings.parent_changed(key)
    }

    fn writable_change_event(&self, settings: &T, key: /*Ignored*/glib::Quark) -> bool{
        settings.parent_writable_change_event(key)
    }

    fn writable_changed(&self, settings: &T, key: &str){
        settings.parent_writable_changed(key)
    }

}

pub trait SettingsImplExt<T> {}

}
impl<S: SettingsImpl<T>, T: ObjectType >> SettingsImplExt<T> for S {}

any_impl!(SettingsBase, SettingsImpl);

pub unsafe trait SettingsBase: ObjectType {

    fn parent_change_event(&self, keys: /*Ignored*/glib::Quark, n_keys: i32) -> bool{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GSettingsClass;
            (*parent_klass)
            .change_event
            .map(|f|{ from_glib(f(self.to_glib_none().0,keys,n_keys)) })
            .unwrap_or(())
        }
    }

    fn parent_changed(&self, key: &str){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GSettingsClass;
            (*parent_klass)
            .changed
            .map(|f|{ f(self.to_glib_none().0,key.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_writable_change_event(&self, key: /*Ignored*/glib::Quark) -> bool{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GSettingsClass;
            (*parent_klass)
            .writable_change_event
            .map(|f|{ from_glib(f(self.to_glib_none().0,key)) })
            .unwrap_or(())
        }
    }

    fn parent_writable_changed(&self, key: &str){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GSettingsClass;
            (*parent_klass)
            .writable_changed
            .map(|f|{ f(self.to_glib_none().0,key.to_glib_none().0); })
            .unwrap_or(())
        }
    }

}

pub unsafe trait SettingsClassExt<T: SettingsBase>
where
    T::ImplType: SettingsImpl<T>{

    fn override_vfuncs(&mut self, _: &ClassInitToken){
        unsafe {
            let klass = &mut *(self as *const Self as *mut ffi::GSettingsClass);
            klass.change_event = Some(settings_change_event::<T>);
            klass.changed = Some(settings_changed::<T>);
            klass.writable_change_event = Some(settings_writable_change_event::<T>);
            klass.writable_changed = Some(settings_writable_changed::<T>);
        }
    }

}

glib_wrapper! {

    pub struct Settings(Object<InstanceStruct<Settings>>)    ;
    match fn { 
         get_type => || get_type::<Settings>(),
     }

}

unsafe impl<T: ObjectType > SettingsBase for T {}

pub type SettingsClass = ClassStruct<Settings>;

// FIXME: Boilerplate

// FIXME: Boilerplate

#[macro_export]
macro_rules! box_settings_impl(
    ($name:ident) => {
        box_object_impl!($name);
        impl<T: $crate::settings::SettingsBase> $crate::settings::SettingsImpl<T> for Box<$name<T>>{

            fn change_event(&self, settings: &T, keys: /*Ignored*/glib::Quark, n_keys: i32) -> bool{
                let imp: &$name<T> = self.as_ref();
                imp.change_event(keys, n_keys)
            }

            fn changed(&self, settings: &T, key: &str){
                let imp: &$name<T> = self.as_ref();
                imp.changed(key)
            }

            fn writable_change_event(&self, settings: &T, key: /*Ignored*/glib::Quark) -> bool{
                let imp: &$name<T> = self.as_ref();
                imp.writable_change_event(key)
            }

            fn writable_changed(&self, settings: &T, key: &str){
                let imp: &$name<T> = self.as_ref();
                imp.writable_changed(key)
            }
        }
    }
);

impl ObjectType for Settings{
    const NAME: &'static str = "RsGio.Settings";
    type ImplType = Box<SettingsImpl<Self>>;
    type InstanceStructType = InstanceStruct<Self>;
    fn class_init(token: &ClassInitToken, klass: &mut SettingsClass) {
        ObjectClassExt::override_vfuncs(klass, token);
    }
    object_type_fns!();
}

unsafe extern "C" fn settings_change_event<T: SettingsBase>
(ptr: *mut GSettings, keys: *const glib::GQuark, n_keys: c_int) -> gboolean
where
    T::ImplType: SettingsImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let settings = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = settings.get_impl();
    imp.change_event()
}

unsafe extern "C" fn settings_changed<T: SettingsBase>
(ptr: *mut GSettings, key: *const c_char)
where
    T::ImplType: SettingsImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let settings = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = settings.get_impl();
    imp.changed()
}

unsafe extern "C" fn settings_writable_change_event<T: SettingsBase>
(ptr: *mut GSettings, key: glib::GQuark) -> gboolean
where
    T::ImplType: SettingsImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let settings = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = settings.get_impl();
    imp.writable_change_event()
}

unsafe extern "C" fn settings_writable_changed<T: SettingsBase>
(ptr: *mut GSettings, key: *const c_char)
where
    T::ImplType: SettingsImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let settings = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = settings.get_impl();
    imp.writable_changed()
}
