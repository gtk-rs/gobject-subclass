// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use MenuItem;
use MenuModel;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;


pub trait MenuImpl<T: MenuBase>: gio_subclass::MenuModelImpl<T> + ObjectImpl<T> + AnyImpl + 'static {

}

pub trait MenuImplExt<T> {}

}
impl<S: MenuImpl<T>, T: ObjectType + glib::IsA<gio::MenuModel>>> MenuImplExt<T> for S {}

any_impl!(MenuBase, MenuImpl);

pub unsafe trait MenuBase: ObjectType + glib::IsA<gio::MenuModel>{

}

glib_wrapper! {

    pub struct Menu(Object<InstanceStruct<Menu>>):[
         gio::MenuModel => gio_ffi::GMenuModel]    ;
    match fn { 
         get_type => || get_type::<Menu>(),
     }

}

unsafe impl<T: ObjectType + glib::IsA<gio::MenuModel>> MenuBase for T {}

pub type MenuClass = ClassStruct<Menu>;

// FIXME: Boilerplate
unsafe impl MenuModelClassExt<Menu> for MenuClass {}

// FIXME: Boilerplate
unsafe impl MenuModelClassExt<Menu> for MenuClass {}

#[macro_export]
macro_rules! box_menu_impl(
    ($name:ident) => {
        box_menumodel_impl!($name);
        impl<T: $crate::menu::MenuBase> $crate::menu::MenuImpl<T> for Box<$name<T>>{
        }
    }
);

impl ObjectType for Menu{
    const NAME: &'static str = "RsGio.Menu";
    type ParentType = gio::MenuModel;
    type ImplType = Box<MenuImpl<Self>>;
    type InstanceStructType = InstanceStruct<Self>;
    fn class_init(token: &ClassInitToken, klass: &mut MenuClass) {
        ObjectClassExt::override_vfuncs(klass, token);
        MenuModelClassExt::override_vfuncs(klass, token);
    }
    object_type_fns!();
}
