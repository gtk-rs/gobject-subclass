// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use Action;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;


pub trait ActionMapImpl: AnyImpl + 'static {

    fn add_action(&self, action_map: &T, action: &Action);

    fn lookup_action(&self, action_map: &T, action_name: &str) -> Option<Action>;

    fn remove_action(&self, action_map: &T, action_name: &str);

}

any_impl!(ActionMapImpl);

pub trait ActionMapImplStatic<T: ObjectType>: 'static {
    fn get_impl<'a>(&self, imp: &'a T::ImplType) -> &'a ActionMapImpl;
}

struct ActionMapStatic<T: ObjectType>{
    imp_static: *const ActionMapImplStatic<T>
}

unsafe extern "C" fn actionmap_add_action<T: >
(ptr: *mut GActionMap, action: *mut GAction)
where
    T::ImplType: ActionMapImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::actionmap_get_type())
                                     as *const ActionMapStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.add_action()
}

unsafe extern "C" fn actionmap_lookup_action<T: >
(ptr: *mut GActionMap, action_name: *const c_char) -> *mut GAction
where
    T::ImplType: ActionMapImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::actionmap_get_type())
                                     as *const ActionMapStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.lookup_action()
}

unsafe extern "C" fn actionmap_remove_action<T: >
(ptr: *mut GActionMap, action_name: *const c_char)
where
    T::ImplType: ActionMapImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::actionmap_get_type())
                                     as *const ActionMapStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.remove_action()
}

unsafe extern "C" fn actionmap_init<T: ObjectType>(
    iface: glib_ffi::gpointer,
    iface_data: glib_ffi::gpointer
) {
    callback_guard!();
    let actionmap_iface = &mut *(iface as *mut ffi::);
    let iface_type = (*(iface as *const gobject_ffi::GTypeInterface)).g_type;
    let type_ = (*(iface as *const gobject_ffi::GTypeInterface)).g_instance_type;
    let klass = &mut *(gobject_ffi::g_type_class_ref(type_) as *mut ClassStruct<T>);
    let interfaces_static = &mut *(klass.interfaces_static as *mut Vec<_>);
    interfaces_static.push((iface_type, iface_data))
    actionmap_iface.add_action = Some(actionmap_add_action::<T>);
    actionmap_iface.lookup_action = Some(actionmap_lookup_action::<T>);
    actionmap_iface.remove_action = Some(actionmap_remove_action::<T>);
}

unsafe extern "C" fn actionmap_get_type<T: ObjectType>(
    type_: glib_ffi::GType
) -> glib::Type {
    callback_guard!();
    let klass = gobject_ffi::g_type_class_peek(type_);
    let klass = &*(klass as *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::actionmap_get_type()) as *const ActionMapStatic<T>;
    (*(*interface_static).imp_static).get_type().to_glib()
}
