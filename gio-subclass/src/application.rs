// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use ActionGroup;
use ActionMap;
use ApplicationFlags;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;


pub trait ApplicationImpl<T: ApplicationBase>: gio_subclass::ActionGroupImpl<T> + gio_subclass::ActionMapImpl<T> + ObjectImpl<T> + AnyImpl + 'static {

    fn activate(&self, application: &T){
        application.parent_activate()
    }

    fn add_platform_data(&self, application: &T, builder: /*Ignored*/&glib::VariantBuilder){
        application.parent_add_platform_data(builder)
    }

    fn after_emit(&self, application: &T, platform_data: &glib::Variant){
        application.parent_after_emit(platform_data)
    }

    fn before_emit(&self, application: &T, platform_data: &glib::Variant){
        application.parent_before_emit(platform_data)
    }

    fn command_line(&self, application: &T, command_line: /*Ignored*/&ApplicationCommandLine) -> i32{
        application.parent_command_line(command_line)
    }

    fn dbus_register(&self, application: &T, connection: /*Ignored*/&DBusConnection, object_path: &str) -> Result<(), Error>{
        application.parent_dbus_register(connection, object_path)
    }

    fn dbus_unregister(&self, application: &T, connection: /*Ignored*/&DBusConnection, object_path: &str){
        application.parent_dbus_unregister(connection, object_path)
    }

    fn handle_local_options(&self, application: &T, options: /*Ignored*/&glib::VariantDict) -> i32{
        application.parent_handle_local_options(options)
    }

    fn local_command_line(&self, application: &T, arguments: /*Unimplemented*/Vec<String>) -> Option<i32>{
        application.parent_local_command_line(arguments)
    }

    fn open(&self, application: &T, files: /*Ignored*/&[File], hint: &str){
        application.parent_open(files, hint)
    }

    fn quit_mainloop(&self, application: &T){
        application.parent_quit_mainloop()
    }

    fn run_mainloop(&self, application: &T){
        application.parent_run_mainloop()
    }

    fn shutdown(&self, application: &T){
        application.parent_shutdown()
    }

    fn startup(&self, application: &T){
        application.parent_startup()
    }

}

pub trait ApplicationImplExt<T> {}

}
impl<S: ApplicationImpl<T>, T: ObjectType + glib::IsA<gio::ActionGroup> + glib::IsA<gio::ActionMap>>> ApplicationImplExt<T> for S {}

any_impl!(ApplicationBase, ApplicationImpl);

pub unsafe trait ApplicationBase: ObjectType + glib::IsA<gio::ActionGroup> + glib::IsA<gio::ActionMap>{

    fn parent_activate(&self){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .activate
            .map(|f|{ f(self.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_add_platform_data(&self, builder: /*Ignored*/&glib::VariantBuilder){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .add_platform_data
            .map(|f|{ f(self.to_glib_none().0,builder.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_after_emit(&self, platform_data: &glib::Variant){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .after_emit
            .map(|f|{ f(self.to_glib_none().0,platform_data.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_before_emit(&self, platform_data: &glib::Variant){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .before_emit
            .map(|f|{ f(self.to_glib_none().0,platform_data.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_command_line(&self, command_line: /*Ignored*/&ApplicationCommandLine) -> i32{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .command_line
            .map(|f|{ f(self.to_glib_none().0,command_line.to_glib_none().0) })
            .unwrap_or(())
        }
    }

    fn parent_dbus_register(&self, connection: /*Ignored*/&DBusConnection, object_path: &str) -> Result<(), Error>{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .dbus_register
            .map(|f|{ let mut error = ptr::null_mut(); let _ = f(self.to_glib_none().0,connection.to_glib_none().0,object_path.to_glib_none().0,error.to_glib_full()); if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) } })
            .unwrap_or(())
        }
    }

    fn parent_dbus_unregister(&self, connection: /*Ignored*/&DBusConnection, object_path: &str){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .dbus_unregister
            .map(|f|{ f(self.to_glib_none().0,connection.to_glib_none().0,object_path.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_handle_local_options(&self, options: /*Ignored*/&glib::VariantDict) -> i32{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .handle_local_options
            .map(|f|{ f(self.to_glib_none().0,options.to_glib_none().0) })
            .unwrap_or(())
        }
    }

    fn parent_local_command_line(&self, arguments: /*Unimplemented*/Vec<String>) -> Option<i32>{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .local_command_line
            .map(|f|{ let mut exit_status = mem::uninitialized(); let ret = from_glib(f(self.to_glib_none().0,arguments.to_glib_full(),exit_status)); if ret { Some(exit_status) } else { None } })
            .unwrap_or(())
        }
    }

    fn parent_open(&self, files: /*Ignored*/&[File], hint: &str){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .open
            .map(|f|{ let n_files = files.len() as i32; f(self.to_glib_none().0,files.to_glib_none().0,n_files,hint.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_quit_mainloop(&self){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .quit_mainloop
            .map(|f|{ f(self.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_run_mainloop(&self){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .run_mainloop
            .map(|f|{ f(self.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_shutdown(&self){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .shutdown
            .map(|f|{ f(self.to_glib_none().0); })
            .unwrap_or(())
        }
    }

    fn parent_startup(&self){
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GApplicationClass;
            (*parent_klass)
            .startup
            .map(|f|{ f(self.to_glib_none().0); })
            .unwrap_or(())
        }
    }

}

pub unsafe trait ApplicationClassExt<T: ApplicationBase>
where
    T::ImplType: ApplicationImpl<T>{

    fn override_vfuncs(&mut self, _: &ClassInitToken){
        unsafe {
            let klass = &mut *(self as *const Self as *mut ffi::GApplicationClass);
            klass.activate = Some(application_activate::<T>);
            klass.add_platform_data = Some(application_add_platform_data::<T>);
            klass.after_emit = Some(application_after_emit::<T>);
            klass.before_emit = Some(application_before_emit::<T>);
            klass.command_line = Some(application_command_line::<T>);
            klass.dbus_register = Some(application_dbus_register::<T>);
            klass.dbus_unregister = Some(application_dbus_unregister::<T>);
            klass.handle_local_options = Some(application_handle_local_options::<T>);
            klass.local_command_line = Some(application_local_command_line::<T>);
            klass.open = Some(application_open::<T>);
            klass.quit_mainloop = Some(application_quit_mainloop::<T>);
            klass.run_mainloop = Some(application_run_mainloop::<T>);
            klass.shutdown = Some(application_shutdown::<T>);
            klass.startup = Some(application_startup::<T>);
        }
    }

}

glib_wrapper! {

    pub struct Application(Object<InstanceStruct<Application>>):[
         gio::ActionGroup => gio_ffi::GActionGroup
         gio::ActionMap => gio_ffi::GActionMap]    ;
    match fn { 
         get_type => || get_type::<Application>(),
     }

}

unsafe impl<T: ObjectType + glib::IsA<gio::ActionGroup> + glib::IsA<gio::ActionMap>> ApplicationBase for T {}

pub type ApplicationClass = ClassStruct<Application>;

// FIXME: Boilerplate
unsafe impl ActionGroupClassExt<Application> for ApplicationClass {}
unsafe impl ActionMapClassExt<Application> for ApplicationClass {}

// FIXME: Boilerplate
unsafe impl ActionGroupClassExt<Application> for ApplicationClass {}
unsafe impl ActionMapClassExt<Application> for ApplicationClass {}

#[macro_export]
macro_rules! box_application_impl(
    ($name:ident) => {
        box_actiongroup_impl!($name);
        box_actionmap_impl!($name);
        impl<T: $crate::application::ApplicationBase> $crate::application::ApplicationImpl<T> for Box<$name<T>>{

            fn activate(&self, application: &T){
                let imp: &$name<T> = self.as_ref();
                imp.activate()
            }

            fn add_platform_data(&self, application: &T, builder: /*Ignored*/&glib::VariantBuilder){
                let imp: &$name<T> = self.as_ref();
                imp.add_platform_data(builder)
            }

            fn after_emit(&self, application: &T, platform_data: &glib::Variant){
                let imp: &$name<T> = self.as_ref();
                imp.after_emit(platform_data)
            }

            fn before_emit(&self, application: &T, platform_data: &glib::Variant){
                let imp: &$name<T> = self.as_ref();
                imp.before_emit(platform_data)
            }

            fn command_line(&self, application: &T, command_line: /*Ignored*/&ApplicationCommandLine) -> i32{
                let imp: &$name<T> = self.as_ref();
                imp.command_line(command_line)
            }

            fn dbus_register(&self, application: &T, connection: /*Ignored*/&DBusConnection, object_path: &str) -> Result<(), Error>{
                let imp: &$name<T> = self.as_ref();
                imp.dbus_register(connection, object_path)
            }

            fn dbus_unregister(&self, application: &T, connection: /*Ignored*/&DBusConnection, object_path: &str){
                let imp: &$name<T> = self.as_ref();
                imp.dbus_unregister(connection, object_path)
            }

            fn handle_local_options(&self, application: &T, options: /*Ignored*/&glib::VariantDict) -> i32{
                let imp: &$name<T> = self.as_ref();
                imp.handle_local_options(options)
            }

            fn local_command_line(&self, application: &T, arguments: /*Unimplemented*/Vec<String>) -> Option<i32>{
                let imp: &$name<T> = self.as_ref();
                imp.local_command_line(arguments)
            }

            fn open(&self, application: &T, files: /*Ignored*/&[File], hint: &str){
                let imp: &$name<T> = self.as_ref();
                imp.open(files, hint)
            }

            fn quit_mainloop(&self, application: &T){
                let imp: &$name<T> = self.as_ref();
                imp.quit_mainloop()
            }

            fn run_mainloop(&self, application: &T){
                let imp: &$name<T> = self.as_ref();
                imp.run_mainloop()
            }

            fn shutdown(&self, application: &T){
                let imp: &$name<T> = self.as_ref();
                imp.shutdown()
            }

            fn startup(&self, application: &T){
                let imp: &$name<T> = self.as_ref();
                imp.startup()
            }
        }
    }
);

impl ObjectType for Application{
    const NAME: &'static str = "RsGio.Application";
    type ImplType = Box<ApplicationImpl<Self>>;
    type InstanceStructType = InstanceStruct<Self>;
    fn class_init(token: &ClassInitToken, klass: &mut ApplicationClass) {
        ObjectClassExt::override_vfuncs(klass, token);
        ActionGroupClassExt::override_vfuncs(klass, token);
        ActionMapClassExt::override_vfuncs(klass, token);
    }
    object_type_fns!();
}

unsafe extern "C" fn application_activate<T: ApplicationBase>
(ptr: *mut GApplication)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.activate()
}

unsafe extern "C" fn application_add_platform_data<T: ApplicationBase>
(ptr: *mut GApplication, builder: *mut glib::GVariantBuilder)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.add_platform_data()
}

unsafe extern "C" fn application_after_emit<T: ApplicationBase>
(ptr: *mut GApplication, platform_data: *mut glib::GVariant)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.after_emit()
}

unsafe extern "C" fn application_before_emit<T: ApplicationBase>
(ptr: *mut GApplication, platform_data: *mut glib::GVariant)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.before_emit()
}

unsafe extern "C" fn application_command_line<T: ApplicationBase>
(ptr: *mut GApplication, command_line: *mut GApplicationCommandLine) -> c_int
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.command_line()
}

unsafe extern "C" fn application_dbus_register<T: ApplicationBase>
(ptr: *mut GApplication, connection: *mut GDBusConnection, object_path: *const c_char, error: *mut *mut glib::GError) -> gboolean
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.dbus_register()
}

unsafe extern "C" fn application_dbus_unregister<T: ApplicationBase>
(ptr: *mut GApplication, connection: *mut GDBusConnection, object_path: *const c_char)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.dbus_unregister()
}

unsafe extern "C" fn application_handle_local_options<T: ApplicationBase>
(ptr: *mut GApplication, options: *mut glib::GVariantDict) -> c_int
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.handle_local_options()
}

unsafe extern "C" fn application_local_command_line<T: ApplicationBase>
(ptr: *mut GApplication, arguments: *mut *mut *mut c_char, exit_status: *mut c_int) -> gboolean
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.local_command_line()
}

unsafe extern "C" fn application_open<T: ApplicationBase>
(ptr: *mut GApplication, files: *mut *mut GFile, n_files: c_int, hint: *const c_char)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.open()
}

unsafe extern "C" fn application_quit_mainloop<T: ApplicationBase>
(ptr: *mut GApplication)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.quit_mainloop()
}

unsafe extern "C" fn application_run_mainloop<T: ApplicationBase>
(ptr: *mut GApplication)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.run_mainloop()
}

unsafe extern "C" fn application_shutdown<T: ApplicationBase>
(ptr: *mut GApplication)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.shutdown()
}

unsafe extern "C" fn application_startup<T: ApplicationBase>
(ptr: *mut GApplication)
where
    T::ImplType: ApplicationImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let application = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = application.get_impl();
    imp.startup()
}
