// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use Action;
use ActionGroup;
use ActionMap;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;


pub trait SimpleActionGroupImpl<T: SimpleActionGroupBase>: gio_subclass::ActionGroupImpl<T> + gio_subclass::ActionMapImpl<T> + ObjectImpl<T> + AnyImpl + 'static {

}

pub trait SimpleActionGroupImplExt<T> {}

}
impl<S: SimpleActionGroupImpl<T>, T: ObjectType + glib::IsA<gio::ActionGroup> + glib::IsA<gio::ActionMap>>> SimpleActionGroupImplExt<T> for S {}

any_impl!(SimpleActionGroupBase, SimpleActionGroupImpl);

pub unsafe trait SimpleActionGroupBase: ObjectType + glib::IsA<gio::ActionGroup> + glib::IsA<gio::ActionMap>{

}

pub unsafe trait SimpleActionGroupClassExt<T: SimpleActionGroupBase>
where
    T::ImplType: SimpleActionGroupImpl<T>{

    fn override_vfuncs(&mut self, _: &ClassInitToken){
        unsafe {
            let klass = &mut *(self as *const Self as *mut ffi::GSimpleActionGroupClass);
        }
    }

}

glib_wrapper! {

    pub struct SimpleActionGroup(Object<InstanceStruct<SimpleActionGroup>>):[
         gio::ActionGroup => gio_ffi::GActionGroup
         gio::ActionMap => gio_ffi::GActionMap]    ;
    match fn { 
         get_type => || get_type::<SimpleActionGroup>(),
     }

}

unsafe impl<T: ObjectType + glib::IsA<gio::ActionGroup> + glib::IsA<gio::ActionMap>> SimpleActionGroupBase for T {}

pub type SimpleActionGroupClass = ClassStruct<SimpleActionGroup>;

// FIXME: Boilerplate
unsafe impl ActionGroupClassExt<SimpleActionGroup> for SimpleActionGroupClass {}
unsafe impl ActionMapClassExt<SimpleActionGroup> for SimpleActionGroupClass {}

// FIXME: Boilerplate
unsafe impl ActionGroupClassExt<SimpleActionGroup> for SimpleActionGroupClass {}
unsafe impl ActionMapClassExt<SimpleActionGroup> for SimpleActionGroupClass {}

#[macro_export]
macro_rules! box_simpleactiongroup_impl(
    ($name:ident) => {
        box_actiongroup_impl!($name);
        box_actionmap_impl!($name);
        impl<T: $crate::simple_action_group::SimpleActionGroupBase> $crate::simple_action_group::SimpleActionGroupImpl<T> for Box<$name<T>>{
        }
    }
);

impl ObjectType for SimpleActionGroup{
    const NAME: &'static str = "RsGio.SimpleActionGroup";
    type ImplType = Box<SimpleActionGroupImpl<Self>>;
    type InstanceStructType = InstanceStruct<Self>;
    fn class_init(token: &ClassInitToken, klass: &mut SimpleActionGroupClass) {
        ObjectClassExt::override_vfuncs(klass, token);
        ActionGroupClassExt::override_vfuncs(klass, token);
        ActionMapClassExt::override_vfuncs(klass, token);
    }
    object_type_fns!();
}
