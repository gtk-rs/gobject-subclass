// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use Drive;
use Mount;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;


pub trait VolumeImpl: AnyImpl + 'static {

    fn can_eject(&self, volume: &T) -> bool;

    fn can_mount(&self, volume: &T) -> bool;

    fn changed(&self, volume: &T);

    fn eject(&self, volume: &T, flags: /*Ignored*/MountUnmountFlags, cancellable: /*Ignored*/Option<&Cancellable>, callback: AsyncReadyCallback);

    fn eject_finish(&self, volume: &T, result: /*Ignored*/&AsyncResult) -> Result<(), Error>;

    fn eject_with_operation(&self, volume: &T, flags: /*Ignored*/MountUnmountFlags, mount_operation: /*Ignored*/Option<&MountOperation>, cancellable: /*Ignored*/Option<&Cancellable>, callback: AsyncReadyCallback);

    fn eject_with_operation_finish(&self, volume: &T, result: /*Ignored*/&AsyncResult) -> Result<(), Error>;

    fn enumerate_identifiers(&self, volume: &T) -> Vec<String>;

    fn get_activation_root(&self, volume: &T) -> /*Ignored*/Option<File>;

    fn get_drive(&self, volume: &T) -> Option<Drive>;

    fn get_icon(&self, volume: &T) -> /*Ignored*/Option<Icon>;

    fn get_identifier(&self, volume: &T, kind: &str) -> Option<String>;

    fn get_mount(&self, volume: &T) -> Option<Mount>;

    fn get_name(&self, volume: &T) -> Option<String>;

    fn get_sort_key(&self, volume: &T) -> Option<String>;

    fn get_symbolic_icon(&self, volume: &T) -> /*Ignored*/Option<Icon>;

    fn get_uuid(&self, volume: &T) -> Option<String>;

    fn mount_finish(&self, volume: &T, result: /*Ignored*/&AsyncResult) -> Result<(), Error>;

    fn mount_fn(&self, volume: &T, flags: /*Ignored*/MountMountFlags, mount_operation: /*Ignored*/Option<&MountOperation>, cancellable: /*Ignored*/Option<&Cancellable>, callback: AsyncReadyCallback);

    fn removed(&self, volume: &T);

    fn should_automount(&self, volume: &T) -> bool;

}

any_impl!(VolumeImpl);

pub trait VolumeImplStatic<T: ObjectType>: 'static {
    fn get_impl<'a>(&self, imp: &'a T::ImplType) -> &'a VolumeImpl;
}

struct VolumeStatic<T: ObjectType>{
    imp_static: *const VolumeImplStatic<T>
}

unsafe extern "C" fn volume_can_eject<T: >
(ptr: *mut GVolume) -> gboolean
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.can_eject()
}

unsafe extern "C" fn volume_can_mount<T: >
(ptr: *mut GVolume) -> gboolean
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.can_mount()
}

unsafe extern "C" fn volume_changed<T: >
(ptr: *mut GVolume)
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.changed()
}

unsafe extern "C" fn volume_eject<T: >
(ptr: *mut GVolume, flags: GMountUnmountFlags, cancellable: *mut GCancellable, callback: GAsyncReadyCallback, user_data: gpointer)
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.eject()
}

unsafe extern "C" fn volume_eject_finish<T: >
(ptr: *mut GVolume, result: *mut GAsyncResult, error: *mut *mut glib::GError) -> gboolean
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.eject_finish()
}

unsafe extern "C" fn volume_eject_with_operation<T: >
(ptr: *mut GVolume, flags: GMountUnmountFlags, mount_operation: *mut GMountOperation, cancellable: *mut GCancellable, callback: GAsyncReadyCallback, user_data: gpointer)
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.eject_with_operation()
}

unsafe extern "C" fn volume_eject_with_operation_finish<T: >
(ptr: *mut GVolume, result: *mut GAsyncResult, error: *mut *mut glib::GError) -> gboolean
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.eject_with_operation_finish()
}

unsafe extern "C" fn volume_enumerate_identifiers<T: >
(ptr: *mut GVolume) -> *mut *mut c_char
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.enumerate_identifiers()
}

unsafe extern "C" fn volume_get_activation_root<T: >
(ptr: *mut GVolume) -> *mut GFile
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_activation_root()
}

unsafe extern "C" fn volume_get_drive<T: >
(ptr: *mut GVolume) -> *mut GDrive
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_drive()
}

unsafe extern "C" fn volume_get_icon<T: >
(ptr: *mut GVolume) -> *mut GIcon
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_icon()
}

unsafe extern "C" fn volume_get_identifier<T: >
(ptr: *mut GVolume, kind: *const c_char) -> *mut c_char
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_identifier()
}

unsafe extern "C" fn volume_get_mount<T: >
(ptr: *mut GVolume) -> *mut GMount
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_mount()
}

unsafe extern "C" fn volume_get_name<T: >
(ptr: *mut GVolume) -> *mut c_char
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_name()
}

unsafe extern "C" fn volume_get_sort_key<T: >
(ptr: *mut GVolume) -> *const c_char
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_sort_key()
}

unsafe extern "C" fn volume_get_symbolic_icon<T: >
(ptr: *mut GVolume) -> *mut GIcon
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_symbolic_icon()
}

unsafe extern "C" fn volume_get_uuid<T: >
(ptr: *mut GVolume) -> *mut c_char
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.get_uuid()
}

unsafe extern "C" fn volume_mount_finish<T: >
(ptr: *mut GVolume, result: *mut GAsyncResult, error: *mut *mut glib::GError) -> gboolean
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.mount_finish()
}

unsafe extern "C" fn volume_mount_fn<T: >
(ptr: *mut GVolume, flags: GMountMountFlags, mount_operation: *mut GMountOperation, cancellable: *mut GCancellable, callback: GAsyncReadyCallback, user_data: gpointer)
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.mount_fn()
}

unsafe extern "C" fn volume_removed<T: >
(ptr: *mut GVolume)
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.removed()
}

unsafe extern "C" fn volume_should_automount<T: >
(ptr: *mut GVolume) -> gboolean
where
    T::ImplType: VolumeImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let klass = &**(ptr as *const *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type())
                                     as *const VolumeStatic<T>;
    let interface_static = &*(ptr as *const T::InstanceStructType);
    let imp = instance.get_impl();
    let imp = (*(*interface_static).imp_static).get_impl(imp);
    imp.should_automount()
}

unsafe extern "C" fn volume_init<T: ObjectType>(
    iface: glib_ffi::gpointer,
    iface_data: glib_ffi::gpointer
) {
    callback_guard!();
    let volume_iface = &mut *(iface as *mut ffi::);
    let iface_type = (*(iface as *const gobject_ffi::GTypeInterface)).g_type;
    let type_ = (*(iface as *const gobject_ffi::GTypeInterface)).g_instance_type;
    let klass = &mut *(gobject_ffi::g_type_class_ref(type_) as *mut ClassStruct<T>);
    let interfaces_static = &mut *(klass.interfaces_static as *mut Vec<_>);
    interfaces_static.push((iface_type, iface_data))
    volume_iface.can_eject = Some(volume_can_eject::<T>);
    volume_iface.can_mount = Some(volume_can_mount::<T>);
    volume_iface.changed = Some(volume_changed::<T>);
    volume_iface.eject = Some(volume_eject::<T>);
    volume_iface.eject_finish = Some(volume_eject_finish::<T>);
    volume_iface.eject_with_operation = Some(volume_eject_with_operation::<T>);
    volume_iface.eject_with_operation_finish = Some(volume_eject_with_operation_finish::<T>);
    volume_iface.enumerate_identifiers = Some(volume_enumerate_identifiers::<T>);
    volume_iface.get_activation_root = Some(volume_get_activation_root::<T>);
    volume_iface.get_drive = Some(volume_get_drive::<T>);
    volume_iface.get_icon = Some(volume_get_icon::<T>);
    volume_iface.get_identifier = Some(volume_get_identifier::<T>);
    volume_iface.get_mount = Some(volume_get_mount::<T>);
    volume_iface.get_name = Some(volume_get_name::<T>);
    volume_iface.get_sort_key = Some(volume_get_sort_key::<T>);
    volume_iface.get_symbolic_icon = Some(volume_get_symbolic_icon::<T>);
    volume_iface.get_uuid = Some(volume_get_uuid::<T>);
    volume_iface.mount_finish = Some(volume_mount_finish::<T>);
    volume_iface.mount_fn = Some(volume_mount_fn::<T>);
    volume_iface.removed = Some(volume_removed::<T>);
    volume_iface.should_automount = Some(volume_should_automount::<T>);
}

unsafe extern "C" fn volume_get_type<T: ObjectType>(
    type_: glib_ffi::GType
) -> glib::Type {
    callback_guard!();
    let klass = gobject_ffi::g_type_class_peek(type_);
    let klass = &*(klass as *const ClassStruct<T>);
    let interface_static = klass.get_interface_static(ffi::volume_get_type()) as *const VolumeStatic<T>;
    (*(*interface_static).imp_static).get_type().to_glib()
}
