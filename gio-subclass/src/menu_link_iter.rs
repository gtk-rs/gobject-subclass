// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use MenuModel;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;


pub trait MenuLinkIterImpl<T: MenuLinkIterBase>: ObjectImpl<T> + AnyImpl + 'static {

    fn get_next(&self, iter: &T) -> Option<(String, MenuModel)>{
        iter.parent_get_next()
    }

}

pub trait MenuLinkIterImplExt<T> {}

}
impl<S: MenuLinkIterImpl<T>, T: ObjectType >> MenuLinkIterImplExt<T> for S {}

any_impl!(MenuLinkIterBase, MenuLinkIterImpl);

pub unsafe trait MenuLinkIterBase: ObjectType {

    fn parent_get_next(&self) -> Option<(String, MenuModel)>{
        unsafe {
            let klass = self.get_class();
            let parent_klass = (*klass).get_parent_class() as *const ffi::GMenuLinkIterClass;
            (*parent_klass)
            .get_next
            .map(|f|{ let mut out_link = ptr::null(); let mut value = ptr::null_mut(); let ret = from_glib(f(self.to_glib_none().0,out_link.to_glib_none_mut().0,value.to_glib_full())); if ret { Some((from_glib_none(out_link), from_glib_full(value))) } else { None } })
            .unwrap_or(())
        }
    }

}

pub unsafe trait MenuLinkIterClassExt<T: MenuLinkIterBase>
where
    T::ImplType: MenuLinkIterImpl<T>{

    fn override_vfuncs(&mut self, _: &ClassInitToken){
        unsafe {
            let klass = &mut *(self as *const Self as *mut ffi::GMenuLinkIterClass);
            klass.get_next = Some(menulinkiter_get_next::<T>);
        }
    }

}

glib_wrapper! {

    pub struct MenuLinkIter(Object<InstanceStruct<MenuLinkIter>>)    ;
    match fn { 
         get_type => || get_type::<MenuLinkIter>(),
     }

}

unsafe impl<T: ObjectType > MenuLinkIterBase for T {}

pub type MenuLinkIterClass = ClassStruct<MenuLinkIter>;

// FIXME: Boilerplate

// FIXME: Boilerplate

#[macro_export]
macro_rules! box_menulinkiter_impl(
    ($name:ident) => {
        box_object_impl!($name);
        impl<T: $crate::menu_link_iter::MenuLinkIterBase> $crate::menu_link_iter::MenuLinkIterImpl<T> for Box<$name<T>>{

            fn get_next(&self, iter: &T) -> Option<(String, MenuModel)>{
                let imp: &$name<T> = self.as_ref();
                imp.get_next()
            }
        }
    }
);

impl ObjectType for MenuLinkIter{
    const NAME: &'static str = "RsGio.MenuLinkIter";
    type ImplType = Box<MenuLinkIterImpl<Self>>;
    type InstanceStructType = InstanceStruct<Self>;
    fn class_init(token: &ClassInitToken, klass: &mut MenuLinkIterClass) {
        ObjectClassExt::override_vfuncs(klass, token);
    }
    object_type_fns!();
}

unsafe extern "C" fn menulinkiter_get_next<T: MenuLinkIterBase>
(ptr: *mut GMenuLinkIter, out_link: *mut *const c_char, value: *mut *mut GMenuModel) -> gboolean
where
    T::ImplType: MenuLinkIterImpl<T>
{
    callback_guard!();
    floating_reference_guard!(ptr);
    let menulinkiter = &*(ptr as *mut T::InstanceStructType);
    let wrap: T = from_glib_borrow(ptr as *mut T::InstanceStructType);
    let imp = menulinkiter.get_impl();
    imp.get_next()
}
