// This file was generated by gir (https://github.com/gtk-rs/gir @ a3d21e2+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern crate libc;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

use MenuModel;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;


pub trait MenuItemImpl<T: MenuItemBase>: ObjectImpl<T> + AnyImpl + 'static {

}

pub trait MenuItemImplExt<T> {}

}
impl<S: MenuItemImpl<T>, T: ObjectType >> MenuItemImplExt<T> for S {}

any_impl!(MenuItemBase, MenuItemImpl);

pub unsafe trait MenuItemBase: ObjectType {

}

glib_wrapper! {

    pub struct MenuItem(Object<InstanceStruct<MenuItem>>)    ;
    match fn { 
         get_type => || get_type::<MenuItem>(),
     }

}

unsafe impl<T: ObjectType > MenuItemBase for T {}

pub type MenuItemClass = ClassStruct<MenuItem>;

// FIXME: Boilerplate

// FIXME: Boilerplate

#[macro_export]
macro_rules! box_menuitem_impl(
    ($name:ident) => {
        box_object_impl!($name);
        impl<T: $crate::menu_item::MenuItemBase> $crate::menu_item::MenuItemImpl<T> for Box<$name<T>>{
        }
    }
);

impl ObjectType for MenuItem{
    const NAME: &'static str = "RsGio.MenuItem";
    type ImplType = Box<MenuItemImpl<Self>>;
    type InstanceStructType = InstanceStruct<Self>;
    fn class_init(token: &ClassInitToken, klass: &mut MenuItemClass) {
        ObjectClassExt::override_vfuncs(klass, token);
    }
    object_type_fns!();
}
